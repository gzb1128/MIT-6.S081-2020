1.
a0,a1,a2... are used to contain arguments to function.a2 holds 13 in main's call to printf.

2.
my compiler inline functions.

main uses these codes to call f:
li a1,12

f uses these codes to call g:
addiw a0,a0,3

3.
printf lies in address 0x630

4.
0x38

5.
the output is "He110 World"
the ascii code is "726c64",so set i to 0x726c6400
don't need to change 57616

6.
translate these codes assembly
we notice that the assemble code simply store 3 in a1,string pointer in a0,and nothing in a2, which means the second augument passed to printf depends on the historic movement of the code, the number in a2.
